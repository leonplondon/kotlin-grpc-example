plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.8.0'
    id 'com.google.protobuf' version '0.9.2'
    id 'application'
    id 'org.springframework.boot' version '2.7.10'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.6.21'
}

group = 'pro.darkgod'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.grpc:grpc-kotlin-stub:1.3.0'
    implementation 'io.grpc:grpc-netty-shaded:1.53.0'
    implementation 'io.grpc:grpc-protobuf:1.53.0'
    implementation 'io.grpc:grpc-stub:1.53.0'
    implementation 'io.grpc:grpc-services:1.53.0'

    implementation 'com.google.protobuf:protobuf-java:3.22.2'
    implementation 'com.google.protobuf:protobuf-kotlin:3.22.2'

    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

kotlin {
    jvmToolchain(8)
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.22.2'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.53.0'
        }
        grpckt {
            artifact = 'io.grpc:protoc-gen-grpc-kotlin:1.3.0:jdk8@jar'
        }
    }
    generateProtoTasks {
        all().forEach {
            it.plugins {
                kotlin
                grpc
                grpckt
            }
            it.builtins {
                java {}
                kotlin {}
            }
        }
    }
}

tasks.register('grpcServer', CreateStartScripts) {
    mainClass = 'pro.darkgod.ServerOneKt'
    applicationName = "svcone"
    outputDir = new File(project.buildDir, 'scripts' + name)
    classpath = startScripts.classpath
}

tasks.register('grpcClient', CreateStartScripts) {
    mainClass = 'pro.darkgod.ServerTwoKt'
    applicationName = "svctwo"
    outputDir = new File(project.buildDir, 'scripts' + name)
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(grpcServer)
    from(grpcClient)
}

bootJar {
    mainClassName = "pro.darkgod.ServerOneKt"
}